# In all environments, the following files are loaded if they exist,
# the latter taking precedence over the former:
#
#  * .env                contains default values for the environment variables needed by the app
#  * .env.local          uncommitted file with local overrides
#  * .env.$APP_ENV       committed environment-specific defaults
#  * .env.$APP_ENV.local uncommitted environment-specific overrides
#
# Real environment variables win over .env files.
#
# DO NOT DEFINE PRODUCTION SECRETS IN THIS FILE NOR IN ANY OTHER COMMITTED FILES.
# https://symfony.com/doc/current/configuration/secrets.html
#
# Run "composer dump-env prod" to compile .env files for production use (requires symfony/flex >=1.2).
# https://symfony.com/doc/current/best_practices.html#use-environment-variables-for-infrastructure-configuration

###> docker-compose configuration ###
COMPOSE_PROJECT_NAME=backend
###< docker-compose configuration ###

###> docker configuration that can be overridden in .env.local ###
WEB_PORT_HTTP=80
WEB_PORT_SSL=443
# XDEBUG_CONFIG possible values: main|osx. Use main value for Linux and Windows, osx value for MacOS.
XDEBUG_CONFIG=main
# Sometimes we need to use different xdebug versions, list of versions can be found here - https://pecl.php.net/package/xdebug
XDEBUG_VERSION=3.3.2
# MySQL version, recommend values: 8.2|8.1|8.0
MYSQL_VERSION=8.2
# MySQL INNODB_USE_NATIVE_AIO possible values: 1|0. Set to 0 when AIO interface is not supported on OSX. https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_use_native_aio
INNODB_USE_NATIVE_AIO=1
# Sometimes AWS MySQL RDS has SQL_MODE="NO_ENGINE_SUBSTITUTION" (https://github.com/awsdocs/amazon-rds-user-guide/issues/160) but MySQL default described here - https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sql_mode
SQL_MODE="ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION"
###< docker configuration that can be overridden in .env.local ###

###> symfony/framework-bundle ###
APP_ENV=dev
APP_DEBUG=1
APP_SECRET=42f011ec3a7bde0bec87364b1d967193
TRUSTED_PROXIES=127.0.0.1,REMOTE_ADDR
#TRUSTED_HOSTS='^localhost|example\.com$'
###< symfony/framework-bundle ###

###> doctrine/doctrine-bundle ###
# Format described at https://www.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/configuration.html#connecting-using-a-url
# IMPORTANT: You MUST configure your server version, either here or in config/packages/doctrine.yaml
#
# DATABASE_URL="sqlite:///%kernel.project_dir%/var/data.db"
# DATABASE_URL="postgresql://app:!ChangeMe!@127.0.0.1:5432/app?serverVersion=15&charset=utf8"
DATABASE_URL=mysql://root:secret@mysql:3306/symfony
###< doctrine/doctrine-bundle ###

###> redis ###
REDIS_URL=redis://redis
###< redis ###

###> symfony/mailer ###
MAILER_DSN=smtp://user:pass@mail:1025
APP_SENDER_EMAIL=admin@localhost
APP_EMAIL_NOTIFICATION_ABOUT_ERROR=1
APP_ERROR_RECEIVER_EMAIL=admin@localhost
###< symfony/mailer ###

###> symfony/messenger ###
MESSENGER_TRANSPORT_DSN=amqp://guest:guest@rabbitmq:5672/%2f/messages
###< symfony/messenger ###

###> Elasticsearch configuration ###
ELK_VERSION=7.10.1
ELASTICSEARCH_HOST=http://elasticsearch:9200
ELASTICSEARCH_NUMBER_OF_SHARDS=1
ELASTICSEARCH_NUMBER_OF_REPLICAS=0
ELASTICSEARCH_USERNAME=elastic
ELASTICSEARCH_PASSWORD=changeme
###< Elasticsearch configuration ###

###> lexik/jwt-authentication-bundle ###
JWT_SECRET_KEY=config/jwt/private.pem
JWT_PUBLIC_KEY=config/jwt/public.pem
JWT_PASSPHRASE=3a37d3afd9accc7959f952b2ae555d21
JWT_TOKEN_TTL=3600
###< lexik/jwt-authentication-bundle ###

###> nelmio/cors-bundle ###
CORS_ALLOW_ORIGIN='^https?://localhost(:[0-9]+)?$'
###< nelmio/cors-bundle ###

###> Api-key options ###
# Attention: Changing values will lead that existing api key tokens will not work. You'll need to create new tokens.
# Possible values: 1|0. Use value 1 when you want to have encrypted api-key tokens using open ssl inside db.
API_KEY_TOKEN_OPEN_SSL_ENCRYPT=1
# Possible values: md5|sha1|sha256|sha512 (https://www.php.net/manual/en/function.hash-algos.php). Used when API_KEY_TOKEN_OPEN_SSL_ENCRYPT set to 1.
API_KEY_TOKEN_HASH_ALGO=sha256
###< Api-key options ###

###> Open ssl options ###
# Attention: Changing values will lead that existing encrypted api key tokens will not work. You'll need to create new tokens.
OPEN_SSL_ALGORITHM=aes-128-gcm
# Set proper ssl key value for your project. It is recommended to have another value for your prod environment and save the value in the secret place.
OPEN_SSL_KEY=systemsdk
###< Open ssl options ###

# how many failure attempts for lock account, 0 - off
LOCK_USER_ON_LOGIN_FAILURE_ATTEMPTS=0

# how many days health history will be stored in the db
DATABASE_HEALTH_HISTORY_DAYS=7

# how many days log login history will be stored in the db
DATABASE_LOG_LOGIN_HISTORY_DAYS=90

# how many days log request history will be stored in the db
DATABASE_LOG_REQUEST_HISTORY_DAYS=15

REQUEST_LOG_SENSITIVE_PROPERTIES='["password", "token", "authorization", "cookie"]'

REQUEST_LOG_IGNORED_ROUTES='["", "/", "/api", "/api/", "/api/health", "/api/version", "/api/secret/*"]'

###> symfony/lock ###
# Choose one of the stores below
# postgresql+advisory://db_user:db_password@localhost/db_name
LOCK_DSN=redis://redis:6379
###< symfony/lock ###

# ARM64V8 name
ARM64V8=arm64v8

# a) Either ARM64V8 image add (for non Mac arm processors)
IMAGE_ADD=""

# b) Or ARM64V8 image add (for Mac arm processors)
#IMAGE_ADD="${ARM64V8}/"

# Namespace of this project
NAMESPACE=de.ixno.php-calendar-api

# Namespace of this project (development)
NAMESPACE_DEVELOPMENT=${NAMESPACE}.development

# Namespace to use for host name variables (hostname safe)
NAMESPACE_HOSTNAME=de-ixno-php-calendar-api

# Namespace to use for host name variables (hostname safe) (development)
NAMESPACE_HOSTNAME_DEVELOPMENT=${NAMESPACE_HOSTNAME}-development

# Namespace of image
APP_IMAGE=ixnode/${IMAGE_ADD}php-calendar-api

# Namespace of image (development)
APP_IMAGE_DEVELOPMENT=ixnode/${IMAGE_ADD}php-calendar-api-dev

# The URL of this project
GENERAL_URL_BASIC=twelvepics.com
GENERAL_URL=${GENERAL_URL_BASIC}

# htpasswd -nbm user pass
GENERAL_BASICAUTH=user:$$apr1$$7Aa2.yBz$$2nTJ7p9le2M1dFTJP3pbe.

# The port for access via the web
NGINX_EXPOSE_PORT_HTTP=80
NGINX_EXPOSE_PORT_HTTPS=443

# Version of this app
VERSION_APP=0.34.0

# Version of this app
VERSION_APP_LATEST=latest

# Set UID and GID
UID=1000 # ${UID:-1000}
GID=1000 # ${GID:-1000}
###< General Config / Docker Compose Settings ###

###> PHP Configuration ###
PHP_FPM_SERVER_DOCKERFILE=php-fpm.dockerfile
PHP_VERSION=8.1.4
PHP_VERSION_HOSTNAME=8-1-4
###< PHP Configuration ###
###> Adminer web application configs
ADMINER_WEB_APPLICATION_URL=adminer.${GENERAL_URL_BASIC}
ADMINER_WEB_APPLICATION_IMAGE=adminer:4.8.1
ADMINER_WEB_APPLICATION_CONTAINER_NAME=adminer-4.8.1-${NAMESPACE}
ADMINER_WEB_APPLICATION_HOSTNAME=adminer-4-8-1-${NAMESPACE_HOSTNAME}
###< Adminer web application configs

###> Messenger Doctrine Transport
###< Messenger Doctrine Transport

###> Traefik configs
TRAEFIK_SUFFIX=
###< Traefik configs

###> Docker Configuration: Mail secrets and configurations
MAIL_SERVER_TRANSPORT=smtp
MAIL_SERVER_HOST=localhost
MAIL_SERVER_PORT=1025
###< Docker Configuration: Mail secrets and configurations

###> Docker Configuration: System secrets and configurations
SYSTEM_CONTEXT=Development
SYSTEM_PROXY_HOST=
###< Docker Configuration: System secrets and configurations

###> Docker Configuration: General configurations
MYSQL_EXPOSE_PORT='3306' # Attention: Please also make changes to the DOCTRINE_DB_PORT variable.
MYSQL_EXPOSE_PORT_TEST='3321'
###< Docker Configuration: General configurations
###> own variables ###
PROJECT_NAME="PHP Calendar API"
API_BASE_URL=/api/v1
###< own variables ###

###> nelmio/cors-bundle ###
###< nelmio/cors-bundle ###

###> lexik/jwt-authentication-bundle ###
JWT_ROLE=IS_AUTHENTICATED_FULLY # AuthenticatedVoter::IS_AUTHENTICATED_FULLY (default), AuthenticatedVoter::PUBLIC_ACCESS, etc.
###< lexik/jwt-authentication-bundle ###

###> api ###
API_TRUSTED_IPS=127.0.0.1
###< api ###

###> doctrine/doctrine-bundle ###
# Format described at https://www.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/configuration.html#connecting-using-a-url

###> table-dumper (local docker settings) ###
MYSQLDUMP_DATABASE_URL=mysql://php-calendar-api:php-calendar-api@127.0.0.1:3320/php-calendar-api?serverVersion=5.7
#MYSQLDUMP_DATABASE_URL=mysql://php-calendar-api:php-calendar-api@de-ixno-php-calendar-api-development-db-10-7-1:3306/php-calendar-api?serverVersion=5.7
MYSQLDUMP_IGNORED_TABLES=calendar*,doctrine_migration_versions,event,holiday_group,image,place,refresh_tokens,user
MYSQLDUMP_IGNORED_TABLES=calendar*,doctrine_migration_versions,event,holiday_group,image,place,refresh_tokens,user,holiday
#MYSQLDUMP_FILTERED_TABLES=
#MYSQLDUMP_TABLES_NO_DATA=
#MYSQLDUMP_TABLES_ONLY_DATA=
###< table-dumper (local docker settings) ###

MAILER_FROM=kimai@example.com
