security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        chain_user_provider:
            chain:
                providers: [security_user_provider, api_key_user_provider]
        security_user_provider:
            id: App\User\Application\Security\Provider\SecurityUserFactory
        api_key_user_provider:
            id: App\ApiKey\Application\Security\Provider\ApiKeyUserProvider
        chain_provider:
            chain:
                providers: [ kimai_internal,kimai_ldap ]
        kimai_internal:
            entity:
                class: App\User\Domain\Entity\User
        kimai_ldap:
            id: App\Ldap\LdapUserProvider

    # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern: ^/api/v1/auth/get_token$
            stateless: true
            #anonymous: true
            json_login:
                provider: security_user_provider
                check_path: /api/v1/auth/get_token
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: App\User\Application\Security\Handler\TranslatedAuthenticationFailureHandler
        root:
            pattern: ^/($|command-scheduler)
            stateless: true
            #anonymous: true
        api:
            pattern: ^/api
            stateless: true
            #anonymous: true
            lazy: true
            provider: chain_user_provider
            jwt: ~
            custom_authenticators:
                - App\ApiKey\Application\Security\Authenticator\ApiKeyAuthenticator
        secured_area:
            kimai_ldap: ~
            pattern: ^/
            user_checker: App\Security\UserChecker
            stateless: false

            entry_point: form_login

            custom_authenticators:
                - App\Saml\SamlAuthenticator

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                always_remember_me: true

            # activate all configured user provider
            provider: chain_provider

            form_login:
                check_path: security_check
                login_path: login
                enable_csrf: true

            two_factor:
                auth_form_path: 2fa_login
                check_path: 2fa_login_check
                remember_me_sets_trusted: true

            logout:
                path: logout
                target: homepage
                enable_csrf: false

            login_throttling:
                max_attempts: 5
                interval: '5 minutes'

            login_link:
                check_route: link_login_check
                signature_properties: [ 'id' ]
                lifetime: 300
                max_uses: 1

    role_hierarchy:
        ROLE_API: [ROLE_LOGGED]
        ROLE_USER: [ROLE_LOGGED]
        ROLE_ADMIN: [ROLE_USER]
        ROLE_ROOT: [ROLE_ADMIN]

    access_decision_manager:
        # only grants access if there is no voter denying access
        strategy: unanimous
        allow_if_all_abstain: false

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/command-scheduler, roles: ROLE_ADMIN }
        - { path: '^/auth/2fa', role: IS_AUTHENTICATED_2FA_IN_PROGRESS }
        - { path: '^/auth', roles: PUBLIC_ACCESS }
        - { path: '^/(%app_locales%)$', role: PUBLIC_ACCESS }
        - { path: '^/(%app_locales%)/auth', role: PUBLIC_ACCESS }
        - { path: '^/(%app_locales%)/login', role: PUBLIC_ACCESS }
        - { path: '^/(%app_locales%)/register', role: PUBLIC_ACCESS }
        - { path: '^/(%app_locales%)/resetting', role: PUBLIC_ACCESS }
        - { path: '^/(%app_locales%)/', roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
